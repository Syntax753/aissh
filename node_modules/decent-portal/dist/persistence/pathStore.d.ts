export type KeyValueRecord = {
    key: string;
    path: string;
    appDataVersion: number;
    mimeType: string;
    lastModified: number;
    text: string | null;
    bytes: Uint8Array | null;
};
export declare function deleteDatabase(): Promise<void>;
export declare function getText(key: string): Promise<string | null>;
export declare function getTextIfModified(key: string, since: number): Promise<string | null>;
export declare function getBytes(key: string): Promise<Uint8Array | null>;
export declare function getBytesIfModified(key: string, since: number): Promise<Uint8Array | null>;
export declare function setText(key: string, text: string | null, mimeType?: string): Promise<void>;
export declare function setBytes(key: string, bytes: Uint8Array | null, mimeType?: string): Promise<void>;
export declare function doesDatabaseExist(): Promise<boolean>;
export declare function getAllKeys(): Promise<string[]>;
export declare function getAllKeysAtPath(path: string): Promise<string[]>;
export declare function getAllKeysMatchingRegex(regex: RegExp): Promise<string[]>;
export declare function getAllValuesAtPath(path: string): Promise<KeyValueRecord[]>;
export declare function getValuesForKeys(keys: string[]): Promise<KeyValueRecord[]>;
export declare function renamePath(currentPath: string, nextPath: string): Promise<void>;
export declare function renameKey(currentKey: string, nextKey: string): Promise<void>;
export declare function deleteByKey(key: string): Promise<void>;
export declare function deleteAllKeys(keys: string[]): Promise<void>;
export declare function deleteAllKeysAtPathExcept(path: string, exceptKeys: string[]): Promise<void>;
export declare function deleteAllKeysAtPath(path: string): Promise<void>;
export declare function doesKeyExist(key: string): Promise<boolean>;
